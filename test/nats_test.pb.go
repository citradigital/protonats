// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nats_test.proto

package test

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TestARequest struct {
	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Id    int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TestARequest) Reset()         { *m = TestARequest{} }
func (m *TestARequest) String() string { return proto.CompactTextString(m) }
func (*TestARequest) ProtoMessage()    {}
func (*TestARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d90f27a68d803275, []int{0}
}
func (m *TestARequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestARequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestARequest.Merge(m, src)
}
func (m *TestARequest) XXX_Size() int {
	return m.Size()
}
func (m *TestARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestARequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestARequest proto.InternalMessageInfo

func (m *TestARequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *TestARequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type TestAResponse struct {
	Output string `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Id     int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TestAResponse) Reset()         { *m = TestAResponse{} }
func (m *TestAResponse) String() string { return proto.CompactTextString(m) }
func (*TestAResponse) ProtoMessage()    {}
func (*TestAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d90f27a68d803275, []int{1}
}
func (m *TestAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestAResponse.Merge(m, src)
}
func (m *TestAResponse) XXX_Size() int {
	return m.Size()
}
func (m *TestAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestAResponse proto.InternalMessageInfo

func (m *TestAResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *TestAResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FeedDataRequest struct {
	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FeedDataRequest) Reset()         { *m = FeedDataRequest{} }
func (m *FeedDataRequest) String() string { return proto.CompactTextString(m) }
func (*FeedDataRequest) ProtoMessage()    {}
func (*FeedDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d90f27a68d803275, []int{2}
}
func (m *FeedDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedDataRequest.Merge(m, src)
}
func (m *FeedDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *FeedDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FeedDataRequest proto.InternalMessageInfo

func (m *FeedDataRequest) GetData() int64 {
	if m != nil {
		return m.Data
	}
	return 0
}

type FeedDataResponse struct {
	Sum int64 `protobuf:"varint,1,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (m *FeedDataResponse) Reset()         { *m = FeedDataResponse{} }
func (m *FeedDataResponse) String() string { return proto.CompactTextString(m) }
func (*FeedDataResponse) ProtoMessage()    {}
func (*FeedDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d90f27a68d803275, []int{3}
}
func (m *FeedDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedDataResponse.Merge(m, src)
}
func (m *FeedDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *FeedDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FeedDataResponse proto.InternalMessageInfo

func (m *FeedDataResponse) GetSum() int64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

type StreamDataRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *StreamDataRequest) Reset()         { *m = StreamDataRequest{} }
func (m *StreamDataRequest) String() string { return proto.CompactTextString(m) }
func (*StreamDataRequest) ProtoMessage()    {}
func (*StreamDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d90f27a68d803275, []int{4}
}
func (m *StreamDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamDataRequest.Merge(m, src)
}
func (m *StreamDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamDataRequest proto.InternalMessageInfo

func (m *StreamDataRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type StreamDataResponse struct {
	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *StreamDataResponse) Reset()         { *m = StreamDataResponse{} }
func (m *StreamDataResponse) String() string { return proto.CompactTextString(m) }
func (*StreamDataResponse) ProtoMessage()    {}
func (*StreamDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d90f27a68d803275, []int{5}
}
func (m *StreamDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamDataResponse.Merge(m, src)
}
func (m *StreamDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamDataResponse proto.InternalMessageInfo

func (m *StreamDataResponse) GetData() int64 {
	if m != nil {
		return m.Data
	}
	return 0
}

func init() {
	proto.RegisterType((*TestARequest)(nil), "cdl.protonats.TestARequest")
	proto.RegisterType((*TestAResponse)(nil), "cdl.protonats.TestAResponse")
	proto.RegisterType((*FeedDataRequest)(nil), "cdl.protonats.FeedDataRequest")
	proto.RegisterType((*FeedDataResponse)(nil), "cdl.protonats.FeedDataResponse")
	proto.RegisterType((*StreamDataRequest)(nil), "cdl.protonats.StreamDataRequest")
	proto.RegisterType((*StreamDataResponse)(nil), "cdl.protonats.StreamDataResponse")
}

func init() { proto.RegisterFile("nats_test.proto", fileDescriptor_d90f27a68d803275) }

var fileDescriptor_d90f27a68d803275 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xcd, 0xb4, 0xfd, 0x4a, 0xbf, 0xab, 0xb5, 0xf5, 0x22, 0x52, 0xaa, 0x8c, 0x31, 0x2a, 0x64,
	0x15, 0x44, 0x05, 0xd7, 0x8a, 0xd8, 0xa5, 0x90, 0xea, 0xc6, 0x8d, 0x8c, 0xcd, 0x2c, 0x02, 0x36,
	0x89, 0x99, 0x1b, 0x9f, 0xc3, 0xc7, 0x72, 0xd9, 0xa5, 0x4b, 0x49, 0xde, 0x43, 0x24, 0x7f, 0x26,
	0xa6, 0xd5, 0xdd, 0x1d, 0xce, 0x1f, 0xe7, 0x30, 0x30, 0xf0, 0x04, 0xa9, 0x07, 0x92, 0x8a, 0xac,
	0x20, 0xf4, 0xc9, 0xc7, 0xfe, 0xcc, 0x79, 0xca, 0xcf, 0x14, 0x31, 0xce, 0x60, 0xfd, 0x56, 0x2a,
	0xba, 0xb0, 0xe5, 0x73, 0x24, 0x15, 0xe1, 0x16, 0xfc, 0x73, 0xbd, 0x20, 0xa2, 0x11, 0xd3, 0x99,
	0xf9, 0xdf, 0xce, 0x1f, 0xb8, 0x01, 0x2d, 0xd7, 0x19, 0xb5, 0x74, 0x66, 0xb6, 0xed, 0x96, 0xeb,
	0x18, 0xe7, 0xd0, 0x2f, 0x54, 0x2a, 0xf0, 0x3d, 0x25, 0x71, 0x1b, 0xba, 0x7e, 0x44, 0x95, 0xae,
	0x78, 0x2d, 0x09, 0x8f, 0x60, 0x70, 0x2d, 0xa5, 0x73, 0x25, 0x48, 0x94, 0x89, 0x08, 0x1d, 0x47,
	0x90, 0xc8, 0x84, 0x6d, 0x3b, 0xbb, 0x8d, 0x43, 0x18, 0x56, 0xb4, 0x22, 0x62, 0x08, 0x6d, 0x15,
	0xcd, 0x0b, 0x5a, 0x7a, 0x1a, 0x07, 0xb0, 0x39, 0xa5, 0x50, 0x8a, 0x79, 0xdd, 0x2e, 0x4f, 0x64,
	0xdf, 0x89, 0x26, 0x60, 0x9d, 0x54, 0x98, 0xad, 0x08, 0x3d, 0xf9, 0x64, 0xb0, 0x96, 0xb6, 0x9a,
	0xca, 0xf0, 0xc5, 0x9d, 0x49, 0x9c, 0x40, 0x6f, 0x22, 0x29, 0xeb, 0x89, 0x3b, 0xd6, 0x8f, 0xd9,
	0xac, 0xfa, 0x66, 0xe3, 0xdd, 0xd5, 0x60, 0x1e, 0x65, 0x68, 0x78, 0x03, 0xbd, 0xb2, 0x0d, 0xf2,
	0x06, 0xb7, 0xb1, 0xc6, 0x78, 0xef, 0x57, 0xbc, 0xb4, 0x33, 0x19, 0xde, 0x01, 0x54, 0x9d, 0x50,
	0x6f, 0x48, 0x96, 0x36, 0x19, 0xef, 0xff, 0xc1, 0x28, 0x6d, 0x8f, 0xd9, 0x25, 0x7f, 0x8b, 0x39,
	0x5b, 0xc4, 0x9c, 0x7d, 0xc4, 0x9c, 0xbd, 0x26, 0x5c, 0x5b, 0x24, 0x5c, 0x7b, 0x4f, 0xb8, 0x76,
	0xdf, 0x49, 0x3f, 0xd0, 0x63, 0x37, 0x73, 0x38, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x51, 0x37,
	0x5a, 0x1d, 0x54, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestServiceClient interface {
	GetTestA(ctx context.Context, in *TestARequest, opts ...grpc.CallOption) (*TestAResponse, error)
	FeedData(ctx context.Context, opts ...grpc.CallOption) (TestService_FeedDataClient, error)
	StreamData(ctx context.Context, in *StreamDataRequest, opts ...grpc.CallOption) (TestService_StreamDataClient, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) GetTestA(ctx context.Context, in *TestARequest, opts ...grpc.CallOption) (*TestAResponse, error) {
	out := new(TestAResponse)
	err := c.cc.Invoke(ctx, "/cdl.protonats.TestService/GetTestA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) FeedData(ctx context.Context, opts ...grpc.CallOption) (TestService_FeedDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[0], "/cdl.protonats.TestService/FeedData", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceFeedDataClient{stream}
	return x, nil
}

type TestService_FeedDataClient interface {
	Send(*FeedDataRequest) error
	CloseAndRecv() (*FeedDataResponse, error)
	grpc.ClientStream
}

type testServiceFeedDataClient struct {
	grpc.ClientStream
}

func (x *testServiceFeedDataClient) Send(m *FeedDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceFeedDataClient) CloseAndRecv() (*FeedDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FeedDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) StreamData(ctx context.Context, in *StreamDataRequest, opts ...grpc.CallOption) (TestService_StreamDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[1], "/cdl.protonats.TestService/StreamData", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceStreamDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_StreamDataClient interface {
	Recv() (*StreamDataResponse, error)
	grpc.ClientStream
}

type testServiceStreamDataClient struct {
	grpc.ClientStream
}

func (x *testServiceStreamDataClient) Recv() (*StreamDataResponse, error) {
	m := new(StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServiceServer is the server API for TestService service.
type TestServiceServer interface {
	GetTestA(context.Context, *TestARequest) (*TestAResponse, error)
	FeedData(TestService_FeedDataServer) error
	StreamData(*StreamDataRequest, TestService_StreamDataServer) error
}

// UnimplementedTestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (*UnimplementedTestServiceServer) GetTestA(ctx context.Context, req *TestARequest) (*TestAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestA not implemented")
}
func (*UnimplementedTestServiceServer) FeedData(srv TestService_FeedDataServer) error {
	return status.Errorf(codes.Unimplemented, "method FeedData not implemented")
}
func (*UnimplementedTestServiceServer) StreamData(req *StreamDataRequest, srv TestService_StreamDataServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamData not implemented")
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_GetTestA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetTestA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdl.protonats.TestService/GetTestA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetTestA(ctx, req.(*TestARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_FeedData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).FeedData(&testServiceFeedDataServer{stream})
}

type TestService_FeedDataServer interface {
	SendAndClose(*FeedDataResponse) error
	Recv() (*FeedDataRequest, error)
	grpc.ServerStream
}

type testServiceFeedDataServer struct {
	grpc.ServerStream
}

func (x *testServiceFeedDataServer) SendAndClose(m *FeedDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceFeedDataServer) Recv() (*FeedDataRequest, error) {
	m := new(FeedDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_StreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).StreamData(m, &testServiceStreamDataServer{stream})
}

type TestService_StreamDataServer interface {
	Send(*StreamDataResponse) error
	grpc.ServerStream
}

type testServiceStreamDataServer struct {
	grpc.ServerStream
}

func (x *testServiceStreamDataServer) Send(m *StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cdl.protonats.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTestA",
			Handler:    _TestService_GetTestA_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FeedData",
			Handler:       _TestService_FeedData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamData",
			Handler:       _TestService_StreamData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nats_test.proto",
}

func (m *TestARequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestARequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestARequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintNatsTest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintNatsTest(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintNatsTest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintNatsTest(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeedDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != 0 {
		i = encodeVarintNatsTest(dAtA, i, uint64(m.Data))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeedDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != 0 {
		i = encodeVarintNatsTest(dAtA, i, uint64(m.Sum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintNatsTest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != 0 {
		i = encodeVarintNatsTest(dAtA, i, uint64(m.Data))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNatsTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovNatsTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestARequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovNatsTest(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovNatsTest(uint64(m.Id))
	}
	return n
}

func (m *TestAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovNatsTest(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovNatsTest(uint64(m.Id))
	}
	return n
}

func (m *FeedDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != 0 {
		n += 1 + sovNatsTest(uint64(m.Data))
	}
	return n
}

func (m *FeedDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != 0 {
		n += 1 + sovNatsTest(uint64(m.Sum))
	}
	return n
}

func (m *StreamDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNatsTest(uint64(m.Id))
	}
	return n
}

func (m *StreamDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != 0 {
		n += 1 + sovNatsTest(uint64(m.Data))
	}
	return n
}

func sovNatsTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNatsTest(x uint64) (n int) {
	return sovNatsTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestARequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNatsTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestARequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestARequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatsTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNatsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNatsTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNatsTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNatsTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNatsTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatsTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNatsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNatsTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNatsTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNatsTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNatsTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			m.Data = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Data |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNatsTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNatsTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNatsTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNatsTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			m.Sum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNatsTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNatsTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNatsTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNatsTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNatsTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNatsTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNatsTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNatsTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			m.Data = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Data |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNatsTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNatsTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNatsTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNatsTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNatsTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNatsTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNatsTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNatsTest
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthNatsTest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNatsTest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNatsTest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthNatsTest
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNatsTest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNatsTest   = fmt.Errorf("proto: integer overflow")
)
